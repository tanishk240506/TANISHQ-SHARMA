1. Create a class Person with private attributes name, age, and public methods to set and get the values.



#include <iostream>
using namespace std;

class Person {
private:
    string name;
    int age;

public:
    void setName(string n) { name = n; }
    void setAge(int a) { age = a; }
    string getName() { return name; }
    int getAge() { return age; }
};
2. Implement a class Student that inherits from Person and adds a private attribute studentID with appropriate methods.



class Student : public Person {
private:
    int studentID;

public:
    void setStudentID(int id) { studentID = id; }
    int getStudentID() { return studentID; }
};
3. Design a class Car with attributes for make, model, and year. Include methods to display car details.



class Car {
private:
    string make, model;
    int year;

public:
    Car(string mk, string mdl, int yr) : make(mk), model(mdl), year(yr) {}

    void display() {
        cout << "Make: " << make << ", Model: " << model << ", Year: " << year << endl;
    }
};
4. Write a program that creates an array of Car objects and displays their details.



int main() {
    Car cars[] = {
        Car("Toyota", "Camry", 2020),
        Car("Honda", "Civic", 2021),
        Car("Ford", "Mustang", 2019)
    };

    for (int i = 0; i < 3; ++i) {
        cars[i].display();
    }

    return 0;
}
5. Implement a class BankAccount with private attributes for account number, balance, and public methods for depositing and withdrawing money.



class BankAccount {
private:
    int accountNumber;
    double balance;

public:
    BankAccount(int acc, double bal) : accountNumber(acc), balance(bal) {}

    void deposit(double amount) { balance += amount; }
    void withdraw(double amount) {
        if (balance >= amount) balance -= amount;
    }
    void display() {
        cout << "Account: " << accountNumber << ", Balance: " << balance << endl;
    }
};
6. Create a class Rectangle with private attributes for length and width, and public methods to calculate area and perimeter.



class Rectangle {
private:
    double length, width;

public:
    Rectangle(double l, double w) : length(l), width(w) {}

    double area() { return length * width; }
    double perimeter() { return 2 * (length + width); }
};
7. Write a class Employee with private attributes name, position, and salary, and public methods to display employee details.



class Employee {
private:
    string name, position;
    double salary;

public:
    Employee(string n, string p, double s) : name(n), position(p), salary(s) {}

    void display() {
        cout << "Name: " << name << ", Position: " << position << ", Salary: " << salary << endl;
    }
};
8. Create a class Counter with a static data member to count the number of objects created.



class Counter {
private:
    static int count;

public:
    Counter() { ++count; }
    static int getCount() { return count; }
};
int Counter::count = 0;
9. Implement a class Math with static function members for basic arithmetic operations.



class Math {
public:
    static int add(int a, int b) { return a + b; }
    static int subtract(int a, int b) { return a - b; }
    static int multiply(int a, int b) { return a * b; }
    static double divide(double a, double b) { return b != 0 ? a / b : 0; }
};
10. Write a class Student with a static data member to keep track of the total number of students enrolled.



class Student {
private:
    static int count;

public:
    Student() { ++count; }
    static int getTotalStudents() { return count; }
};
int Student::count = 0;
11. Implement a class Book with a parameterized constructor to initialize book details.



class Book {
private:
    string title;
    string author;

public:
    Book(string t, string a) : title(t), author(a) {}

    void display() {
        cout << "Title: " << title << ", Author: " << author << endl;
    }
};
12. Create a class Point with a default constructor, parameterized constructor, and  constructor.



class Point {
private:
    int x, y;

public:
    Point() : x(0), y(0) {}
    Point(int a, int b) : x(a), y(b) {}
    Point(const Point &p) : x(p.x), y(p.y) {}

    void display() {
        cout << "(" << x << ", " << y << ")" << endl;
    }
};
13. Write a class Matrix with a parameterized constructor to initialize a 2D array.



class Matrix {
private:
    int mat[2][2];

public:
    Matrix(int a, int b, int c, int d) {
        mat[0][0] = a; mat[0][1] = b;
        mat[1][0] = c; mat[1][1] = d;
    }

    void display() {
        cout << mat[0][0] << " " << mat[0][1] << endl;
        cout << mat[1][0] << " " << mat[1][1] << endl;
    }
};
13. Write a class Matrix with a parameterized constructor to initialize a 2D array.



class Matrix {
private:
    int rows, cols;
    int** mat;
public:
    Matrix(int r, int c) : rows(r), cols(c) {
        mat = new int*[rows];
        for (int i = 0; i < rows; ++i) {
            mat[i] = new int[cols];
        }
    }
    ~Matrix() {
        for (int i = 0; i < rows; ++i) {
            delete[] mat[i];
        }
        delete[] mat;
    }
};
14. Implement a class FileHandler with a destructor that closes an open file.



#include <fstream>

class FileHandler {
private:
    std::ifstream file;
public:
    FileHandler(std::string filename) {
        file.open(filename);
    }
    ~FileHandler() {
        if (file.is_open()) {
            file.close();
        }
    }
};
15. Create a class DynamicArray with a destructor that deallocates dynamically allocated memory.



class DynamicArray {
private:
    int* arr;
    int size;
public:
    DynamicArray(int s) : size(s) {
        arr = new int[size];
    }
    ~DynamicArray() {
        delete[] arr;
    }
};
16. Write a class Logger with a destructor that logs messages when the object is destroyed.



#include <iostream>

class Logger {
public:
    ~Logger() {
        std::cout << "Object is being destroyed!" << std::endl;
    }
};
17. Overload the "+" operator for a class Complex to add two complex numbers.



class Complex {
private:
    double real, imag;
public:
    Complex(double r, double i) : real(r), imag(i) {}
    Complex operator+(const Complex& c) {
        return Complex(real + c.real, imag + c.imag);
    }
};
18. Implement the "<<" and ">>" operators for a class Fraction to input and output fraction values.



#include <iostream>

class Fraction {
private:
    int numerator, denominator;
public:
    friend std::ostream& operator<<(std::ostream& os, const Fraction& f) {
        os << f.numerator << "/" << f.denominator;
        return os;
    }
    friend std::istream& operator>>(std::istream& is, Fraction& f) {
        is >> f.numerator >> f.denominator;
        return is;
    }
};
19. Overload the "==" operator for a class Date to compare two dates.



class Date {
private:
    int day, month, year;
public:
    bool operator==(const Date& d) {
        return (day == d.day && month == d.month && year == d.year);
    }
};
20. Write a class Vector and overload the "[]" operator to access elements of the vector.



class Vector {
private:
    int* arr;
    int size;
public:
    Vector(int s) : size(s) {
        arr = new int[size];
    }
    int& operator[](int index) {
        return arr[index];
    }
};
21. Implement a class Box with a friend function to calculate the volume of two boxes.



class Box {
private:
    double length, width, height;
public:
    Box(double l, double w, double h) : length(l), width(w), height(h) {}
    friend double calculateVolume(Box& b1, Box& b2);
};

double calculateVolume(Box& b1, Box& b2) {
    return b1.length * b1.width * b1.height + b2.length * b2.width * b2.height;
}
22. Create a class Circle with a friend function to calculate the area.



class Circle {
private:
    double radius;
public:
    Circle(double r) : radius(r) {}
    friend double calculateArea(Circle& c);
};

double calculateArea(Circle& c) {
    return 3.14 * c.radius * c.radius;
}
23. Write a class Distance with a friend function to add two distances.



class Distance {
private:
    double feet, inches;
public:
    Distance(double f, double i) : feet(f), inches(i) {}
    friend Distance addDistances(Distance& d1, Distance& d2);
};

Distance addDistances(Distance& d1, Distance& d2) {
    double totalFeet = d1.feet + d2.feet;
    double totalInches = d1.inches + d2.inches;
    if (totalInches >= 12) {
        totalFeet += totalInches / 12;
        totalInches = totalInches - 12;
    }
    return Distance(totalFeet, totalInches);
}
24. Implement a class Shape with derived classes Circle, Rectangle, and Triangle.



class Shape {
public:
    virtual void draw() = 0; // Pure virtual function
};

class Circle : public Shape {
public:
    void draw() override {
        std::cout << "Drawing Circle" << std::endl;
    }
};

class Rectangle : public Shape {
public:
    void draw() override {
        std::cout << "Drawing Rectangle" << std::endl;
    }
};

class Triangle : public Shape {
public:
    void draw() override {
        std::cout << "Drawing Triangle" << std::endl;
    }
};
25. Create a class Animal with derived classes Dog, Cat, and Bird.



class Animal {
public:
    virtual void sound() = 0; // Pure virtual function
};

class Dog : public Animal {
public:
    void sound() override {
        std::cout << "Woof!" << std::endl;
    }
};

class Cat : public Animal {
public:
    void sound() override {
        std::cout << "Meow!" << std::endl;
    }
};

class Bird : public Animal {
public:
    void sound() override {
        std::cout << "Tweet!" << std::endl;
    }
};
26. Write a class Vehicle with derived classes Car and Bike.



class Vehicle {
public:
    virtual void display() = 0; // Pure virtual function
};

class Car : public Vehicle {
public:
    void display() override {
        std::cout << "This is a Car" << std::endl;
    }
};

class Bike : public Vehicle {
public:
    void display() override {
        std::cout << "This is a Bike" << std::endl;
    }
};
27. Implement single inheritance with a base class Person and derived class Employee.



class Person {
protected:
    std::string name;
public:
    Person(std::string n) : name(n) {}
    void display() {
        std::cout << "Name: " << name << std::endl;
    }
};

class Employee : public Person {
private:
    double salary;
public:
    Employee(std::string n, double s) : Person(n), salary(s) {}
    void displayDetails() {
        display();
        std::cout << "Salary: " << salary << std::endl;
    }
};
28. Create a class Parent and implement multiple inheritance with derived classes Child1 and Child2.



class Parent {
public:
    void showParent() {
        std::cout << "This is the Parent class" << std::endl;
    }
};

class Child1 : virtual public Parent {
public:
    void showChild1() {
        std::cout << "This is Child1 class" << std::endl;
    }
};

class Child2 : virtual public Parent {
public:
    void showChild2() {
        std::cout << "This is Child2 class" << std::endl;
    }
};
29. Write a class Base and implement hierarchical inheritance with derived classes Derived1, Derived2, and Derived3.



class Base {
public:
    void showBase() {
        std::cout << "This is the Base class" << std::endl;
    }
};

class Derived1 : public Base {
public:
    void showDerived1() {
        std::cout << "This is Derived1 class" << std::endl;
    }
};

class Derived2 : public Base {
public:
    void showDerived2() {
        std::cout << "This is Derived2 class" << std::endl;
    }
};

class Derived3 : public Base {
public:
    void showDerived3() {
        std::cout << "This is Derived3 class" << std::endl;
    }
};
30. Implement multilevel inheritance with classes Base, Intermediate, and Derived.



class Base {
public:
    void showBase() {
        std::cout << "This is the Base class" << std::endl;
    }
};

class Intermediate : public Base {
public:
    void showIntermediate() {
        std::cout << "This is the Intermediate class" << std::endl;
    }
};

class Derived : public Intermediate {
public:
    void showDerived() {
        std::cout << "This is the Derived class" << std::endl;
    }
};
31. Create a class Base and implement hybrid inheritance with derived classes Derived1, Derived2, and Derived3.



class Base {
public:
    void showBase() {
        std::cout << "This is the Base class" << std::endl;
    }
};

class Derived1 : public Base {
public:
    void showDerived1() {
        std::cout << "This is Derived1 class" << std::endl;
    }
};

class Derived2 : public Base {
public:
    void showDerived2() {
        std::cout << "This is Derived2 class" << std::endl;
    }
};

class Derived3 : public Derived1, public Derived2 {
public:
    void showDerived3() {
        std::cout << "This is Derived3 class" << std::endl;
    }
};
32. Implement a class Library with private, protected, and public members and demonstrate their accessibility.



class Library {
private:
    std::string bookName;
protected:
    int bookID;
public:
    void setDetails(std::string name, int id) {
        bookName = name;
        bookID = id;
    }
    void displayDetails() {
        std::cout << "Book Name: " << bookName << ", Book ID: " << bookID << std::endl;
    }
};
33. Create a class Account with private data members and public methods to access and modify them.



class Account {
private:
    std::string accountHolder;
    double balance;
public:
    void setAccountDetails(std::string name, double bal) {
        accountHolder = name;
        balance = bal;
    }
    void deposit(double amount) {
        balance += amount;
    }
    void withdraw(double amount) {
        if (amount <= balance) {
            balance -= amount;
        }
    }
    void display() {
        std::cout << "Account Holder: " << accountHolder << ", Balance: " << balance << std::endl;
    }
};
34. Implement function overriding with a base class Shape and derived class Circle.



class Shape {
public:
    virtual void draw() {
        std::cout << "Drawing Shape" << std::endl;
    }
};

class Circle : public Shape {
public:
    void draw() override {
        std::cout << "Drawing Circle" << std::endl;
    }
};
35. Create a base class Employee and derived class Manager with overridden methods.



class Employee {
public:
    virtual void display() {
        std::cout << "Employee details" << std::endl;
    }
};

class Manager : public Employee {
public:
    void display() override {
        std::cout << "Manager details" << std::endl;
    }
};
36. Implement a virtual base class Entity with derived classes Person and Organization.



class Entity {
public:
    virtual void display() = 0; // Pure virtual function
};

class Person : public virtual Entity {
public:
    void display() override {
        std::cout << "Person Entity" << std::endl;
    }
};

class Organization : public virtual Entity {
public:
    void display() override {
        std::cout << "Organization Entity" << std::endl;
    }
};
37. Write a class Animal and implement a virtual base class to avoid the diamond problem in inheritance.



class Animal {
public:
    virtual void sound() = 0;
};

class Mammal : virtual public Animal {
public:
    void sound() override {
        std::cout << "Mammal sound" << std::endl;
    }
};

class Bird : virtual public Animal {
public:
    void sound() override {
        std::cout << "Bird sound" << std::endl;
    }
};

class Bat : public Mammal, public Bird {
public:
    void sound() override {
        std::cout << "Bat sound" << std::endl;
    }
};
38. Implement a class Polynomial with member functions to add and multiply polynomials.



class Polynomial {
private:
    int* coefficients;
    int degree;
public:
    Polynomial(int deg) : degree(deg) {
        coefficients = new int[degree + 1];
    }

    void setCoefficients(int* coeffs) {
        for (int i = 0; i <= degree; ++i) {
            coefficients[i] = coeffs[i];
        }
    }

    Polynomial add(const Polynomial& p) {
        int maxDegree = std::max(degree, p.degree);
        Polynomial result(maxDegree);

        for (int i = 0; i <= maxDegree; ++i) {
            result.coefficients[i] = coefficients[i] + p.coefficients[i];
        }
        return result;
    }
    
    Polynomial multiply(const Polynomial& p) {
        Polynomial result(degree + p.degree);
        for (int i = 0; i <= degree; ++i) {
            for (int j = 0; j <= p.degree; ++j) {
                result.coefficients[i + j] += coefficients[i] * p.coefficients[j];
            }
        }
        return result;
    }
};
39. Create a class SparseMatrix with member functions for matrix addition and multiplication.



class SparseMatrix {
private:
    int rows, cols;
    std::vector<std::tuple<int, int, int>> elements; // row, col, value
public:
    SparseMatrix(int r, int c) : rows(r), cols(c) {}

    void addElement(int r, int c, int value) {
        elements.push_back(std::make_tuple(r, c, value));
    }

    SparseMatrix add(const SparseMatrix& other) {
        SparseMatrix result(rows, cols);
        for (const auto& elem : elements) {
            result.addElement(std::get<0>(elem), std::get<1>(elem), std::get<2>(elem));
        }
        for (const auto& elem : other.elements) {
            result.addElement(std::get<0>(elem), std::get<1>(elem), std::get<2>(elem));
        }
        return result;
    }

    SparseMatrix multiply(const SparseMatrix& other) {
        SparseMatrix result(rows, other.cols);
        // Implement multiplication logic
        return result;
    }
};
40. Write a class Time with member functions to add, subtract, and compare time values.



class Time {
private:
    int hours, minutes, seconds;
public:
    Time(int h, int m, int s) : hours(h), minutes(m), seconds(s) {}

    void add(const Time& t) {
        seconds += t.seconds;
        minutes += t.minutes + seconds / 60;
        hours += t.hours + minutes / 60;
        seconds %= 60;
        minutes %= 60;
        hours %= 24;
    }

    void subtract(const Time& t) {
        // Handle subtraction logic
    }

    bool isEqual(const Time& t) const {
        return hours == t.hours && minutes == t.minutes && seconds == t.seconds;
    }

    void display() const {
        std::cout << hours << ":" << minutes << ":" << seconds << std::endl;
    }
};
41. Implement a class BigNumber to handle arithmetic operations on large numbers.



#include <string>
#include <iostream>

class BigNumber {
private:
    std::string number;
public:
    BigNumber(std::string n) : number(n) {}

    BigNumber add(const BigNumber& other) {
        // Implement large number addition
        return BigNumber("result");
    }

    BigNumber multiply(const BigNumber& other) {
        // Implement large number multiplication
        return BigNumber("result");
    }

    void display() const {
        std::cout << number << std::endl;
    }
};
42. Create a class FileCompressor with member functions to compress and decompress files.



#include <fstream>
#include <iostream>
#include <zlib.h> // Compression library

class FileCompressor {
public:
    void compress(const std::string& filename) {
        // Implement compression logic
    }

    void decompress(const std::string& filename) {
        // Implement decompression logic
    }
};
43. Write a class Network with member functions to simulate network packet transmission.



class Network {
public:
    void sendPacket(const std::string& data) {
        std::cout << "Sending packet: " << data << std::endl;
    }

    void receivePacket() {
        std::cout << "Receiving packet..." << std::endl;
    }
};
44. Implement a class Cache with member functions to store and retrieve cached data.



#include <unordered_map>

class Cache {
private:
    std::unordered_map<std::string, std::string> cache;

public:
    void store(const std::string& key, const std::string& value) {
        cache[key] = value;
    }

    std::string retrieve(const std::string& key) {
        if (cache.find(key) != cache.end()) {
            return cache[key];
        }
        return "Not found";
    }
};
45. Create a class Game with member functions to simulate a simple game with player actions and scoring.



#include <iostream>
#include <string>

class Game {
private:
    int score;
    std::string playerName;

public:
    Game(std::string name) : playerName(name), score(0) {}

    void start() {
        std::cout << "Starting game for " << playerName << std::endl;
    }

    void playerAction(std::string action) {
        if (action == "score") {
            score++;
            std::cout << "Player " << playerName << " scored! Current score: " << score << std::endl;
        }
        // Implement other actions
    }

    void displayScore() {
        std::cout << "Current Score: " << score << std::endl;
    }
};
