1. Write a C++ program that prints "Hello, World!" using the main function.

cpp
Copy
Edit
#include <iostream>
using namespace std;

int main() {
    cout << "Hello, World!" << endl;
    return 0;
}
2. Create a program that takes two integers as command line arguments and prints their sum.

cpp
Copy
Edit
#include <iostream>
#include <cstdlib>
using namespace std;

int main(int argc, char* argv[]) {
    if (argc != 3) {
        cout << "Usage: " << argv[0] << " <num1> <num2>" << endl;
        return 1;
    }
    int a = atoi(argv[1]);
    int b = atoi(argv[2]);
    cout << "Sum: " << a + b << endl;
    return 0;
}
3. Write a function prototype for a function that calculates the factorial of a number.

cpp
Copy
Edit
int factorial(int n);  // Function prototype
4. Implement a C++ program with a function prototype for a function that returns the maximum of three numbers.

cpp
Copy
Edit
#include <iostream>
using namespace std;

int maxOfThree(int a, int b, int c); // Prototype

int main() {
    cout << "Maximum: " << maxOfThree(10, 25, 15) << endl;
    return 0;
}

int maxOfThree(int a, int b, int c) {
    return (a > b && a > c) ? a : (b > c ? b : c);
}
5. Write a simple function that calculates the area of a circle.

cpp
Copy
Edit
#include <iostream>
using namespace std;

float areaOfCircle(float radius) {
    return 3.14159 * radius * radius;
}

int main() {
    cout << "Area: " << areaOfCircle(5.0) << endl;
    return 0;
}
6. Implement a function that takes two integers and returns their product.

cpp
Copy
Edit
int product(int a, int b) {
    return a * b;
}
7. Create a function that prints the elements of an array.

cpp
Copy
Edit
#include <iostream>
using namespace std;

void printArray(int arr[], int size) {
    for (int i = 0; i < size; i++)
        cout << arr[i] << " ";
    cout << endl;
}
8. Write a function to swap two integers using call by reference.

cpp
Copy
Edit
void swap(int &a, int &b) {
    int temp = a;
    a = b;
    b = temp;
}
9. Implement a function that increments the value of an integer by 10 using call by reference.

cpp
Copy
Edit
void incrementByTen(int &x) {
    x += 10;
}
10. Create a function that modifies the elements of an array using call by reference.

cpp
Copy
Edit
void doubleElements(int (&arr)[5]) {
    for (int i = 0; i < 5; i++)
        arr[i] *= 2;
}
11. Write an inline function that calculates the square of a number.

cpp
Copy
Edit
inline int square(int x) {
    return x * x;
}
12. Create an inline function that returns the cube of a number.

cpp
Copy
Edit
inline int cube(int x) {
    return x * x * x;
}
13. Implement a program that uses an inline function to calculate the sum of two numbers.

cpp
Copy
Edit
#include <iostream>
using namespace std;

inline int add(int a, int b) {
    return a + b;
}

int main() {
    cout << "Sum: " << add(10, 20) << endl;
    return 0;
}
14. Write a macro to calculate the square of a number and compare its performance with an inline function.

cpp
Copy
Edit
#include <iostream>
#define SQUARE(x) ((x) * (x))
inline int square(int x) { return x * x; }

int main() {
    cout << "Macro square: " << SQUARE(5) << endl;
    cout << "Inline square: " << square(5) << endl;
    return 0;
}
15. Implement a macro to find the maximum of two numbers and compare it with an inline function.

cpp
Copy
Edit
#include <iostream>
#define MAX(x, y) ((x) > (y) ? (x) : (y))
inline int maxVal(int x, int y) { return (x > y) ? x : y; }

int main() {
    cout << "Macro max: " << MAX(10, 20) << endl;
    cout << "Inline max: " << maxVal(10, 20) << endl;
    return 0;
}
16. Write overloaded functions to calculate the area of a circle, rectangle, and triangle.

cpp
Copy
Edit
#include <iostream>
using namespace std;

float area(float radius) {
    return 3.14159 * radius * radius;
}

float area(float length, float width) {
    return length * width;
}

float area(float base, float height, int triangle) {
    return 0.5 * base * height;
}
17. Implement overloaded functions to find the maximum of two and three numbers.

cpp
Copy
Edit
int max(int a, int b) {
    return (a > b) ? a : b;
}

int max(int a, int b, int c) {
    return max(max(a, b), c);
}
18. Create overloaded functions to print different data types (int, float, string).

cpp
Copy
Edit
#include <iostream>
using namespace std;

void print(int a) {
    cout << "Integer: " << a << endl;
}

void print(float b) {
    cout << "Float: " << b << endl;
}

void print(string s) {
    cout << "String: " << s << endl;
}
19. Write a function with default arguments to calculate the compound interest.

cpp
Copy
Edit
float compoundInterest(float principal, float rate = 5.0, int time = 2) {
    return principal * pow((1 + rate / 100), time);
}
20. Implement a function with default arguments to print a greeting message (default name is "Guest").

cpp
Copy
Edit
#include <iostream>
using namespace std;

void greet(string name = "Guest") {
    cout << "Hello, " << name << "!" << endl;
}
21. Create a function that calculates the power of a number with a default exponent of 2.

cpp
Copy
Edit
int power(int base, int exponent = 2) {
    int result = 1;
    for (int i = 0; i < exponent; ++i)
        result *= base;
    return result;
}
22. Write a program to demonstrate the concept of recursive functions.

cpp
Copy
Edit
#include <iostream>
using namespace std;

int factorial(int n) {
    if (n <= 1)
        return 1;
    return n * factorial(n - 1);
}

int main() {
    cout << "Factorial of 5: " << factorial(5) << endl;
    return 0;
}
23. Implement a program that uses an array of function pointers.

cpp
Copy
Edit
#include <iostream>
using namespace std;

int add(int a, int b) { return a + b; }
int sub(int a, int b) { return a - b; }

int main() {
    int (*funcs[2])(int, int) = { add, sub };
    cout << "Add: " << funcs[0](10, 5) << endl;
    cout << "Sub: " << funcs[1](10, 5) << endl;
    return 0;
}
24. Create a program to demonstrate the use of function templates.

cpp
Copy
Edit
#include <iostream>
using namespace std;

template <typename T>
T maxVal(T a, T b) {
    return (a > b) ? a : b;
}

int main() {
    cout << "Max int: " << maxVal(10, 20) << endl;
    cout << "Max float: " << maxVal(5.5f, 2.3f) << endl;
    return 0;
}
25. Write a program to illustrate the concept of function pointers and callback functions.

cpp
Copy
Edit
#include <iostream>
using namespace std;

void greetMorning() { cout << "Good Morning!" << endl; }
void greetEvening() { cout << "Good Evening!" << endl; }

void greet(void (*func)()) {
    func();  // Callback
}

int main() {
    greet(greetMorning);
    greet(greetEvening);
    return 0;
}
